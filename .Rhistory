NoLegend()
# Visualize the correlation between genes detected and number of UMIs and determine whether strong presence of cells with low numbers of genes/UMIs
p4 <- metadata %>%
ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) +
geom_point() +
scale_colour_gradient(low = "gray90", high = "black") +
scale_x_log10() +
scale_y_log10() +
geom_vline(xintercept = qcValues[2]) +
geom_hline(yintercept = qcValues[1])
# Visualize the distribution of mitochondrial gene expression detected per cell
p5 <- metadata %>%
ggplot(aes(color=orig.ident, x=percent.mt, fill=orig.ident)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = qcValues[3]) +
xlim(0,10) +
NoLegend()
# Visualize the overall complexity of the gene expression by visualizing the genes detected per UMI
p6 <- metadata %>%
ggplot(aes(x=log10GenesPerUMI, color = orig.ident, fill=orig.ident)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = 0.8)
# Visualize the correlation between genes detected and number of UMIs with mt filter
p1 <- metadata %>%
filter(percent.mt < qcValues[3]) %>%
ggplot(aes(x=nCount_RNA, y=nFeature_RNA)) +
geom_pointdensity() +
scale_color_viridis_c() +
scale_x_log10() +
scale_y_log10() +
geom_vline(xintercept = qcValues[2]) +
geom_hline(yintercept = qcValues[1])
plot_grid(p2,p3,p5,p6,p4,p1, ncol = 3)
dataQC <- subset(data, subset = (nFeature_RNA >= qcValues[1]) & (nCount_RNA >=qcValues[2]) & (percent.mt < qcValues[3]))
# quantify how many cells there are
paste0("There are ", ncol(dataQC), " cells after QC")
paste0("There were ", ncol(data) - ncol(dataQC), " cells removed in QC")
library(deMULTIplex2)
dataQC
GetAssayData(dataQC, assay = "oBC", layer = "counts")
library(deMULTIplex2)
run_demulti <- function(seurat_obj){
# create tag count matrix with cells as row
tag_mtx <- t(GetAssayData(seurat_obj, assay = "oBC", layer = "counts"))
res <- demultiplexTags(tag_mtx,
plot.path = "~/", # Where to output a summary plot
plot.name = "test", # text append to the name of the summary plot file
plot.diagnostics = T) # Whether to output diagnostics plots for each tag
# set plot.umap = "none" to not produce any plots
return(res)
}
dataQC$orig.ident
test <- run_demulti(subset(dataQC, subset = orig.ident == "SIG04-lane1"))
test
GetAssayData(dataQC, assay = "oBC", layer = "counts")[,c("p129","IL6")]
GetAssayData(dataQC, assay = "oBC", layer = "counts")
GetAssayData(dataQC, assay = "oBC", layer = "counts")[c("p129","IL6"),]
library(deMULTIplex2)
run_demulti <- function(seurat_obj){
# create tag count matrix with cells as row
tag_mtx <- t(GetAssayData(seurat_obj, assay = "oBC", layer = "counts")[c("p129","IL6","WNT1"),])
res <- demultiplexTags(tag_mtx,
plot.path = "~/", # Where to output a summary plot
plot.name = "test", # text append to the name of the summary plot file
plot.diagnostics = T) # Whether to output diagnostics plots for each tag
# set plot.umap = "none" to not produce any plots
return(res)
}
test <- run_demulti(subset(dataQC, subset = orig.ident == "SIG04-lane1"))
test
library(deMULTIplex2)
run_demulti <- function(seurat_obj){
# create tag count matrix with cells as row
tag_mtx <- t(GetAssayData(seurat_obj, assay = "oBC", layer = "counts")[c("p129","IL6","WNT1"),])
res <- demultiplexTags(tag_mtx,
plot.path = "~/", # Where to output a summary plot
plot.name = "test", # text append to the name of the summary plot file
plot.diagnostics = T,
max.cell.fit = 50000) # Whether to output diagnostics plots for each tag
# set plot.umap = "none" to not produce any plots
return(res)
}
test$final_assign
test$final_assign %>% unique()
table(test$final_assign)
devtools::install_github(repo = 'bimberlab/cellhashR', ref = 'master', dependencies = TRUE, upgrade = 'always')
library(deMULTIplex2)
run_demulti <- function(seurat_obj){
# create tag count matrix with cells as row
tag_mtx <- t(GetAssayData(seurat_obj, assay = "oBC", layer = "counts")[c("p129","IL6","WNT1"),])
res <- demultiplexTags(tag_mtx,
plot.path = "~/", # Where to output a summary plot
plot.name = "test", # text append to the name of the summary plot file
plot.diagnostics = T,
max.cell.fit = 50000) # Whether to output diagnostics plots for each tag
# set plot.umap = "none" to not produce any plots
return(res)
}
test <- run_demulti(subset(dataQC, subset = orig.ident == "SIG04-lane1"))
library(deMULTIplex2)
run_demulti <- function(seurat_obj,plot_name){
# create tag count matrix with cells as row
tag_mtx <- t(GetAssayData(seurat_obj, assay = "oBC", layer = "counts"))
res <- demultiplexTags(tag_mtx,
plot.path = "", # Where to output a summary plot
plot.name = seurat_obj$orig.ident %>% unique(),
plot.diagnostics = T,
max.cell.fit = 100000) # Whether to output diagnostics plots for each tag
# set plot.umap = "none" to not produce any plots
return(res)
}
assignmentsLane1 <- run_demulti(subset(dataQC, subset = orig.ident == "SIG04-lane1"))
assignmentsLane1
library(deMULTIplex2)
run_demulti <- function(seurat_obj,plot_name){
# create tag count matrix with cells as row
tag_mtx <- t(GetAssayData(seurat_obj, assay = "oBC", layer = "counts"))
res <- demultiplexTags(tag_mtx,
plot.path = "C:/Users/Eric/Documents/git_projects/SIG04_240816/",
plot.name = seurat_obj$orig.ident %>% unique(),
plot.diagnostics = T,
max.cell.fit = 100000) # Whether to output diagnostics plots for each tag
# set plot.umap = "none" to not produce any plots
return(res)
}
library(deMULTIplex2)
run_demulti <- function(seurat_obj,plot_name){
# create tag count matrix with cells as row
tag_mtx <- t(GetAssayData(seurat_obj, assay = "oBC", layer = "counts"))
res <- demultiplexTags(tag_mtx,
plot.path = "C:/Users/Eric/Documents/git_projects/SIG04_240816/",
plot.name = seurat_obj$orig.ident %>% unique(),
plot.diagnostics = T,
max.cell.fit = 100000) # Whether to output diagnostics plots for each tag
# set plot.umap = "none" to not produce any plots
return(res)
}
assignmentsLane1 <- run_demulti(subset(dataQC, subset = orig.ident == "SIG04-lane1"))
assignmentsLane2 <- run_demulti(subset(dataQC, subset = orig.ident == "SIG04-lane2"))
subset(dataQC, subset = orig.ident == "SIG04-lane2")
assignmentsLane1
assignmentsLane1$assign_table
renv::restore()
renv::snapshot()
table(assignmentsLane1)
table(assignmentsLane1$assign_table)
table(assignmentsLane1$final_assign)
table(assignmentsLane1$res_mtx)
table(assignmentsLane1$res_mtx)/(ncol(dataQC)/2)
table(assignmentsLane1$final_assign)/(ncol(dataQC)/2)
library(tidyverse)
library(Seurat)
library(hdf5r)
library(ggplot2)
library(clustree)
library(cowplot)
library(patchwork)
library(ggpointdensity)
knitr::opts_chunk$set(echo = TRUE)
source("functions/plotting_fxns.R")
source("functions/scRNA_seq_analysis_functions.R")
theme_set(theme_Publication())
dataRaw1 <- Read10X_h5("C:/Users/Eric/My Drive/Lab/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane1_GEX_oBC/filtered_feature_bc_matrix.h5")
dataRaw2 <- Read10X_h5("C:/Users/Eric/My Drive/Lab/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane2_GEX_oBC/filtered_feature_bc_matrix.h5")
names(dataRaw1)
names(dataRaw2)
subset_joint <- function(x){
# identify joint cells between BC and GEX dataset
jointCells <- intersect(colnames(x$`Gene Expression`),
colnames(x$`Antibody Capture`))
# subset each dataset to include joint cells
data <- vector(mode = "list")
data[["GEX"]] <- x$`Gene Expression`[,jointCells]
data[["oBC"]] <- x$`Antibody Capture`[,jointCells]
return(data)
}
dataRaw1 <- subset_joint(dataRaw1)
dataRaw2 <- subset_joint(dataRaw2)
dataMergeGEX <- cbind(dataRaw1$GEX,dataRaw2$GEX)
# create vector of genes to keep
keepGenes <- Matrix::rowSums(dataMergeGEX > 0) >= ncol(dataMergeGEX)*0.0002*0.3
# remove genes from gex matrices
dataRaw1$GEX <- dataRaw1$GEX[keepGenes,]
dataRaw2$GEX <- dataRaw2$GEX[keepGenes,]
rm(dataMergeGEX)
create_seurat <- function(x){
# load GEX counts and add celltag counts into seurat object
data <- CreateSeuratObject(counts = x$GEX, project = "SIG04")
data[["oBC"]] <- CreateAssayObject(counts = x$oBC)
return(data)
}
dataSeurat <- vector(mode = "list")
dataSeurat[["lane1"]] <- create_seurat(dataRaw1)
dataSeurat[["lane2"]] <- create_seurat(dataRaw2)
rm(dataRaw1,dataRaw2)
data <- merge(dataSeurat[[1]],dataSeurat[[2]],
add.cell.ids = c("lane1","lane2"), project = "SIG04") %>%
JoinLayers()
# rename orig.ident based on
data$orig.ident <- paste(data$orig.ident, gsub("_.*","", colnames(data)), sep = "-")
rm(dataSeurat)
DefaultAssay(data) <- "RNA"
# calculate percent mitochondrial reads and ratio
data[["percent.mt"]] <- PercentageFeatureSet(data, pattern = "^mt-")
data[["percent.ribo"]] <- PercentageFeatureSet(data, pattern = "^Rpl|^Rps")
data[["mitoRatio"]] <- data@meta.data$percent.mt / 100
data[["log10GenesPerUMI"]] <- log10(data$nFeature_RNA)/log10(data$nCount_RNA)
data[["log10nFeature_RNA"]] <- log10(data$nFeature_RNA)
data[["log10nCount_RNA"]] <- log10(data$nCount_RNA)
metadata <- data@meta.data
# enter QC values
qcValues <- c(nFeature_RNA = 1000, nCount_RNA = 2000, percent.mt = 5)
# quantify how many cells there are
paste0("There are ", ncol(data), " cells")
# Visualize the number UMIs/transcripts per cell
p2 <- metadata %>%
ggplot(aes(color=orig.ident, x=nCount_RNA, fill= orig.ident)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
ylab("Cell density") +
geom_vline(xintercept = qcValues[2]) +
NoLegend()
# Visualize the distribution of genes detected per cell via histogram
p3 <- metadata %>%
ggplot(aes(color=orig.ident, x=nFeature_RNA, fill= orig.ident)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
geom_vline(xintercept = qcValues[1]) +
NoLegend()
# Visualize the correlation between genes detected and number of UMIs and determine whether strong presence of cells with low numbers of genes/UMIs
p4 <- metadata %>%
ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) +
geom_point() +
scale_colour_gradient(low = "gray90", high = "black") +
scale_x_log10() +
scale_y_log10() +
geom_vline(xintercept = qcValues[2]) +
geom_hline(yintercept = qcValues[1])
# Visualize the distribution of mitochondrial gene expression detected per cell
p5 <- metadata %>%
ggplot(aes(color=orig.ident, x=percent.mt, fill=orig.ident)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = qcValues[3]) +
xlim(0,10) +
NoLegend()
# Visualize the overall complexity of the gene expression by visualizing the genes detected per UMI
p6 <- metadata %>%
ggplot(aes(x=log10GenesPerUMI, color = orig.ident, fill=orig.ident)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = 0.8)
# Visualize the correlation between genes detected and number of UMIs with mt filter
p1 <- metadata %>%
filter(percent.mt < qcValues[3]) %>%
ggplot(aes(x=nCount_RNA, y=nFeature_RNA)) +
geom_pointdensity() +
scale_color_viridis_c() +
scale_x_log10() +
scale_y_log10() +
geom_vline(xintercept = qcValues[2]) +
geom_hline(yintercept = qcValues[1])
plot_grid(p2,p3,p5,p6,p4,p1, ncol = 3)
dataQC <- subset(data, subset = (nFeature_RNA >= qcValues[1]) & (nCount_RNA >=qcValues[2]) & (percent.mt < qcValues[3]))
# quantify how many cells there are
paste0("There are ", ncol(dataQC), " cells after QC")
paste0("There were ", ncol(data) - ncol(dataQC), " cells removed in QC")
dataQC <- NormalizeData(dataQC, assay = "HTO", normalization.method = "CLR")
dataQC <- NormalizeData(dataQC, assay = "oBC", normalization.method = "CLR")
library(tidyverse)
library(Seurat)
library(hdf5r)
library(ggplot2)
library(clustree)
library(cowplot)
library(patchwork)
library(ggpointdensity)
knitr::opts_chunk$set(echo = TRUE)
source("functions/plotting_fxns.R")
source("functions/scRNA_seq_analysis_functions.R")
theme_set(theme_Publication())
dataRaw1 <- Read10X_h5("C:/Users/Eric/My Drive/Lab/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane1_GEX_oBC/filtered_feature_bc_matrix.h5")
dataRaw2 <- Read10X_h5("C:/Users/Eric/My Drive/Lab/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane2_GEX_oBC/filtered_feature_bc_matrix.h5")
names(dataRaw1)
names(dataRaw2)
subset_joint <- function(x){
# identify joint cells between BC and GEX dataset
jointCells <- intersect(colnames(x$`Gene Expression`),
colnames(x$`Antibody Capture`))
# subset each dataset to include joint cells
data <- vector(mode = "list")
data[["GEX"]] <- x$`Gene Expression`[,jointCells]
data[["oBC"]] <- x$`Antibody Capture`[,jointCells]
return(data)
}
dataRaw1 <- subset_joint(dataRaw1)
dataRaw2 <- subset_joint(dataRaw2)
dataMergeGEX <- cbind(dataRaw1$GEX,dataRaw2$GEX)
# create vector of genes to keep
keepGenes <- Matrix::rowSums(dataMergeGEX > 0) >= ncol(dataMergeGEX)*0.0002*0.3
# remove genes from gex matrices
dataRaw1$GEX <- dataRaw1$GEX[keepGenes,]
dataRaw2$GEX <- dataRaw2$GEX[keepGenes,]
rm(dataMergeGEX)
create_seurat <- function(x){
# load GEX counts and add celltag counts into seurat object
data <- CreateSeuratObject(counts = x$GEX, project = "SIG04")
data[["oBC"]] <- CreateAssayObject(counts = x$oBC)
return(data)
}
dataSeurat <- vector(mode = "list")
dataSeurat[["lane1"]] <- create_seurat(dataRaw1)
dataSeurat[["lane2"]] <- create_seurat(dataRaw2)
rm(dataRaw1,dataRaw2)
add_qc_metrics <- function(x){
DefaultAssay(x) <- "RNA"
# calculate percent mitochondrial reads and ratio
x[["percent.mt"]] <- PercentageFeatureSet(x, pattern = "^mt-")
x[["percent.ribo"]] <- PercentageFeatureSet(x, pattern = "^Rpl|^Rps")
x[["mitoRatio"]] <- x@meta.x$percent.mt / 100
x[["log10GenesPerUMI"]] <- log10(x$nFeature_RNA)/log10(x$nCount_RNA)
x[["log10nFeature_RNA"]] <- log10(x$nFeature_RNA)
x[["log10nCount_RNA"]] <- log10(x$nCount_RNA)
}
dataSeurat <- lapply(dataSeurat, function(x) add_qc_metrics(x))
add_qc_metrics <- function(x){
DefaultAssay(x) <- "RNA"
# calculate percent mitochondrial reads and ratio
x[["percent.mt"]] <- PercentageFeatureSet(x, pattern = "^mt-")
x[["percent.ribo"]] <- PercentageFeatureSet(x, pattern = "^Rpl|^Rps")
x[["mitoRatio"]] <- x@meta.data$percent.mt / 100
x[["log10GenesPerUMI"]] <- log10(x$nFeature_RNA)/log10(x$nCount_RNA)
x[["log10nFeature_RNA"]] <- log10(x$nFeature_RNA)
x[["log10nCount_RNA"]] <- log10(x$nCount_RNA)
}
dataSeurat <- lapply(dataSeurat, function(x) add_qc_metrics(x))
metadata <- data@meta.data
metadata
dataSeurat
metadata <- bind_rows(dataSeurat[[1]]@meta.data,dataSeurat[[2]]@meta.data)
library(tidyverse)
library(Seurat)
library(hdf5r)
library(ggplot2)
library(clustree)
library(cowplot)
library(patchwork)
library(ggpointdensity)
knitr::opts_chunk$set(echo = TRUE)
source("functions/plotting_fxns.R")
source("functions/scRNA_seq_analysis_functions.R")
theme_set(theme_Publication())
dataRaw1 <- Read10X_h5("C:/Users/Eric/My Drive/Lab/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane1_GEX_oBC/filtered_feature_bc_matrix.h5")
dataRaw2 <- Read10X_h5("C:/Users/Eric/My Drive/Lab/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane2_GEX_oBC/filtered_feature_bc_matrix.h5")
names(dataRaw1)
names(dataRaw2)
subset_joint <- function(x){
# identify joint cells between BC and GEX dataset
jointCells <- intersect(colnames(x$`Gene Expression`),
colnames(x$`Antibody Capture`))
# subset each dataset to include joint cells
data <- vector(mode = "list")
data[["GEX"]] <- x$`Gene Expression`[,jointCells]
data[["oBC"]] <- x$`Antibody Capture`[,jointCells]
return(data)
}
dataRaw1 <- subset_joint(dataRaw1)
dataRaw2 <- subset_joint(dataRaw2)
dataMergeGEX <- cbind(dataRaw1$GEX,dataRaw2$GEX)
# create vector of genes to keep
keepGenes <- Matrix::rowSums(dataMergeGEX > 0) >= ncol(dataMergeGEX)*0.0002*0.3
# remove genes from gex matrices
dataRaw1$GEX <- dataRaw1$GEX[keepGenes,]
dataRaw2$GEX <- dataRaw2$GEX[keepGenes,]
rm(dataMergeGEX)
create_seurat <- function(x){
# load GEX counts and add celltag counts into seurat object
data <- CreateSeuratObject(counts = x$GEX, project = "SIG04")
data[["oBC"]] <- CreateAssayObject(counts = x$oBC)
return(data)
}
dataSeurat <- vector(mode = "list")
dataSeurat[["lane1"]] <- create_seurat(dataRaw1)
dataSeurat[["lane2"]] <- create_seurat(dataRaw2)
rm(dataRaw1,dataRaw2)
add_qc_metrics <- function(x){
DefaultAssay(x) <- "RNA"
# calculate percent mitochondrial reads and ratio
x[["percent.mt"]] <- PercentageFeatureSet(x, pattern = "^mt-")
x[["percent.ribo"]] <- PercentageFeatureSet(x, pattern = "^Rpl|^Rps")
x[["mitoRatio"]] <- x@meta.data$percent.mt / 100
x[["log10GenesPerUMI"]] <- log10(x$nFeature_RNA)/log10(x$nCount_RNA)
x[["log10nFeature_RNA"]] <- log10(x$nFeature_RNA)
x[["log10nCount_RNA"]] <- log10(x$nCount_RNA)
return(x)
}
dataSeurat <- lapply(dataSeurat, function(x) add_qc_metrics(x))
metadata <- bind_rows(dataSeurat[[1]]@meta.data,dataSeurat[[2]]@meta.data)
metadata
metadata <- bind_rows(dataSeurat[[1]]@meta.data,dataSeurat[[2]]@meta.data) %>%
mutate(orig.ident = c(rep("lane1",ncol(dataSeurat[[1]])),rep("lane1",ncol(dataSeurat[[2]]))))
metadata
# enter QC values
qcValues <- c(nFeature_RNA = 1000, nCount_RNA = 2000, percent.mt = 5)
# quantify how many cells there are
paste0("There are ", ncol(data), " cells")
# Visualize the number UMIs/transcripts per cell
p2 <- metadata %>%
ggplot(aes(color=orig.ident, x=nCount_RNA, fill= orig.ident)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
ylab("Cell density") +
geom_vline(xintercept = qcValues[2]) +
NoLegend()
# Visualize the distribution of genes detected per cell via histogram
p3 <- metadata %>%
ggplot(aes(color=orig.ident, x=nFeature_RNA, fill= orig.ident)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
geom_vline(xintercept = qcValues[1]) +
NoLegend()
# Visualize the correlation between genes detected and number of UMIs and determine whether strong presence of cells with low numbers of genes/UMIs
p4 <- metadata %>%
ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) +
geom_point() +
scale_colour_gradient(low = "gray90", high = "black") +
scale_x_log10() +
scale_y_log10() +
geom_vline(xintercept = qcValues[2]) +
geom_hline(yintercept = qcValues[1])
# Visualize the distribution of mitochondrial gene expression detected per cell
p5 <- metadata %>%
ggplot(aes(color=orig.ident, x=percent.mt, fill=orig.ident)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = qcValues[3]) +
xlim(0,10) +
NoLegend()
# Visualize the overall complexity of the gene expression by visualizing the genes detected per UMI
p6 <- metadata %>%
ggplot(aes(x=log10GenesPerUMI, color = orig.ident, fill=orig.ident)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = 0.8)
# Visualize the correlation between genes detected and number of UMIs with mt filter
p1 <- metadata %>%
filter(percent.mt < qcValues[3]) %>%
ggplot(aes(x=nCount_RNA, y=nFeature_RNA)) +
geom_pointdensity() +
scale_color_viridis_c() +
scale_x_log10() +
scale_y_log10() +
geom_vline(xintercept = qcValues[2]) +
geom_hline(yintercept = qcValues[1])
plot_grid(p2,p3,p5,p6,p4,p1, ncol = 3)
metadata <- bind_rows(dataSeurat[[1]]@meta.data,dataSeurat[[2]]@meta.data) %>%
mutate(orig.ident = c(rep("lane1",ncol(dataSeurat[[1]])),rep("lane2",ncol(dataSeurat[[2]]))))
# enter QC values
qcValues <- c(nFeature_RNA = 1000, nCount_RNA = 2000, percent.mt = 5)
# quantify how many cells there are
paste0("There are ", ncol(data), " cells")
# Visualize the number UMIs/transcripts per cell
p2 <- metadata %>%
ggplot(aes(color=orig.ident, x=nCount_RNA, fill= orig.ident)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
ylab("Cell density") +
geom_vline(xintercept = qcValues[2]) +
NoLegend()
# Visualize the distribution of genes detected per cell via histogram
p3 <- metadata %>%
ggplot(aes(color=orig.ident, x=nFeature_RNA, fill= orig.ident)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
geom_vline(xintercept = qcValues[1]) +
NoLegend()
# Visualize the correlation between genes detected and number of UMIs and determine whether strong presence of cells with low numbers of genes/UMIs
p4 <- metadata %>%
ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) +
geom_point() +
scale_colour_gradient(low = "gray90", high = "black") +
scale_x_log10() +
scale_y_log10() +
geom_vline(xintercept = qcValues[2]) +
geom_hline(yintercept = qcValues[1])
# Visualize the distribution of mitochondrial gene expression detected per cell
p5 <- metadata %>%
ggplot(aes(color=orig.ident, x=percent.mt, fill=orig.ident)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = qcValues[3]) +
xlim(0,10) +
NoLegend()
# Visualize the overall complexity of the gene expression by visualizing the genes detected per UMI
p6 <- metadata %>%
ggplot(aes(x=log10GenesPerUMI, color = orig.ident, fill=orig.ident)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = 0.8)
# Visualize the correlation between genes detected and number of UMIs with mt filter
p1 <- metadata %>%
filter(percent.mt < qcValues[3]) %>%
ggplot(aes(x=nCount_RNA, y=nFeature_RNA)) +
geom_pointdensity() +
scale_color_viridis_c() +
scale_x_log10() +
scale_y_log10() +
geom_vline(xintercept = qcValues[2]) +
geom_hline(yintercept = qcValues[1])
plot_grid(p2,p3,p5,p6,p4,p1, ncol = 3)
dataQC <- lapply(dataSeurat, function(x) subset(x, subset = (nFeature_RNA >= qcValues[1]) & (nCount_RNA >=qcValues[2]) & (percent.mt < qcValues[3])))
?HTODemux()
dataQC <- lapply(dataQC, function(x) NormalizeData(x, assay = "oBC", normalization.method = "CLR"))
dataQC <- lapply(dataQC, function(x) HTODemux(x, assay = "HTO"))
dataQC <- lapply(dataQC, function(x) NormalizeData(x, assay = "oBC", normalization.method = "CLR"))
dataQC <- lapply(dataQC, function(x) HTODemux(x, assay = "oBC"))
dataQC
renv::restore()
