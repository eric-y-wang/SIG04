renv::activate()
renv::status()
renv::status()
renv::status()
install.packages("yaml")
renv::status()
renv::restore()
# install.packages("devtools")
devtools::install_github("immunogenomics/presto")
install.packages("devtools")
devtools::install_github("immunogenomics/presto")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("glmGamPoi")
renv::snapshot()
library(tidyverse)
library(Seurat)
library(hdf5r)
library(ggplot2)
library(clustree)
library(cowplot)
library(patchwork)
library(ggpointdensity)
knitr::opts_chunk$set(echo = TRUE)
source("functions/plotting_fxns.R")
source("functions/scRNA_seq_analysis_functions.R")
theme_set(theme_Publication())
dataRaw1 <- Read10X_h5("C:/Users/Eric/Documents/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane1_merge_GEX_oBC/filtered_feature_bc_matrix.h5")
dataRaw2 <- Read10X_h5("C:/Users/Eric/Documents/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane2_merge_GEX_oBC/filtered_feature_bc_matrix.h5")
names(dataRaw1)
names(dataRaw2)
# import post-QC anndata metadata
metaLane1 <- read_csv("processing_outs/postQC_meta_lane1.csv")
# import post-QC anndata metadata
metaLane1 <- read_csv("processing_outs/postQC_meta_lane1.csv")
metaLane2 <- read_csv("processing_outs/postQC_meta_lane2.csv")
metaLane1
View(metaLane1)
# import post-QC anndata metadata
metaLane1 <- read.csv("processing_outs/postQC_meta_lane1.csv", row.names = "cell_barcode")
metaLane2 <- read.csv("processing_outs/postQC_meta_lane2.csv", row.names = "cell_barcode")
View(metaLane1)
dataMergeGEX <- cbind(dataRaw1$GEX,dataRaw2$GEX)
# create vector of genes to keep
keepGenes <- Matrix::rowSums(dataMergeGEX > 0) >= ncol(dataMergeGEX)*(1/1000)
dataMergeGEX
subset_joint <- function(x){
# identify joint cells between BC and GEX dataset
jointCells <- intersect(colnames(x$`Gene Expression`),
colnames(x$`CRISPR Guide Capture`))
# subset each dataset to include joint cells
data <- vector(mode = "list")
data[["GEX"]] <- x$`Gene Expression`[,jointCells]
data[["oBC"]] <- x$`CRISPR Guide Capture`[,jointCells]
return(data)
}
dataRaw1 <- subset_joint(dataRaw1)
dataRaw2 <- subset_joint(dataRaw2)
dataMergeGEX <- cbind(dataRaw1$GEX,dataRaw2$GEX)
# create vector of genes to keep
keepGenes <- Matrix::rowSums(dataMergeGEX > 0) >= ncol(dataMergeGEX)*(1/1000)
# remove genes from gex matrices
dataRaw1$GEX <- dataRaw1$GEX[keepGenes,]
dataRaw2$GEX <- dataRaw2$GEX[keepGenes,]
rm(dataMergeGEX)
create_seurat <- function(x){
# load GEX counts and add celltag counts into seurat object
data <- CreateSeuratObject(counts = x$GEX, project = "SIG04")
data[["oBC"]] <- CreateAssayObject(counts = x$oBC)
return(data)
}
dataSeurat <- vector(mode = "list")
dataSeurat[["lane1"]] <- create_seurat(dataRaw1)
dataSeurat[["lane2"]] <- create_seurat(dataRaw2)
rm(dataRaw1,dataRaw2)
dataSeurat$lane1
dataSeurat$lane1 %>% colnames()
match[colnames(dataSeurat$lane1),rownames(metaLane1)]
match(colnames(dataSeurat$lane1),rownames(metaLane1))
ncol(dataSeurat$lane1)
merge_adMeta <- function(seurat,meta){
seurat <- subset(seurat, cells = rownames(meta))
# make sure cell barcodes match order between metadata and seurat
meta <- meta[match(colnames(seurat),rownames(meta)),]
print(sum(rownames(meta) == colnames(seurat)) == ncol(seurat))
# replace metadata with anndata meta
seurat@meta.data <- meta
}
test <- merge_adMeta(dataSeurat$lane1, metaLane1)
merge_adMeta <- function(seurat,meta){
seurat <- subset(seurat, cells = rownames(meta))
# make sure cell barcodes match order between metadata and seurat
meta <- meta[match(colnames(seurat),rownames(meta)),]
paste0("All cells match?: ",print(sum(rownames(meta) == colnames(seurat)) == ncol(seurat)))
# replace metadata with anndata meta
seurat@meta.data <- meta
}
test <- merge_adMeta(dataSeurat$lane1, metaLane1)
merge_adMeta <- function(seurat,meta){
seurat <- subset(seurat, cells = rownames(meta))
# make sure cell barcodes match order between metadata and seurat
meta <- meta[match(colnames(seurat),rownames(meta)),]
print(paste0("All cells match?: ",sum(rownames(meta) == colnames(seurat)) == ncol(seurat)))
# replace metadata with anndata meta
seurat@meta.data <- meta
}
test <- merge_adMeta(dataSeurat$lane1, metaLane1)
test
merge_adMeta <- function(seurat,meta){
seurat <- subset(seurat, cells = rownames(meta))
# make sure cell barcodes match order between metadata and seurat
meta <- meta[match(colnames(seurat),rownames(meta)),]
print( paste0("All cells match?: ",sum(rownames(meta) == colnames(seurat)) == ncol(seurat)))
# replace metadata with anndata meta
seurat@meta.data <- meta
}
dataSeurat[["lane1"]] <- merge_adMeta(dataSeurat$lane1, metaLane1)
dataSeurat[["lane1"]] <- merge_adMeta(dataSeurat$lane2, metaLane2)
data <- merge(dataSeurat[[1]],dataSeurat[[2]],
add.cell.ids = c("lane1","lane2"), project = "SIG04") %>%
JoinLayers()
library(tidyverse)
library(Seurat)
library(hdf5r)
library(ggplot2)
library(clustree)
library(cowplot)
library(patchwork)
library(ggpointdensity)
knitr::opts_chunk$set(echo = TRUE)
source("functions/plotting_fxns.R")
source("functions/scRNA_seq_analysis_functions.R")
theme_set(theme_Publication())
# import raw counts from cellranger
dataRaw1 <- Read10X_h5("C:/Users/Eric/Documents/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane1_merge_GEX_oBC/filtered_feature_bc_matrix.h5")
dataRaw2 <- Read10X_h5("C:/Users/Eric/Documents/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane2_merge_GEX_oBC/filtered_feature_bc_matrix.h5")
# import post-QC anndata metadata
metaLane1 <- read.csv("processing_outs/postQC_meta_lane1.csv", row.names = "cell_barcode")
metaLane2 <- read.csv("processing_outs/postQC_meta_lane2.csv", row.names = "cell_barcode")
names(dataRaw1)
names(dataRaw2)
subset_joint <- function(x){
# identify joint cells between BC and GEX dataset
jointCells <- intersect(colnames(x$`Gene Expression`),
colnames(x$`CRISPR Guide Capture`))
# subset each dataset to include joint cells
data <- vector(mode = "list")
data[["GEX"]] <- x$`Gene Expression`[,jointCells]
data[["oBC"]] <- x$`CRISPR Guide Capture`[,jointCells]
return(data)
}
dataRaw1 <- subset_joint(dataRaw1)
dataRaw2 <- subset_joint(dataRaw2)
dataMergeGEX <- cbind(dataRaw1$GEX,dataRaw2$GEX)
# create vector of genes to keep
keepGenes <- Matrix::rowSums(dataMergeGEX > 0) >= ncol(dataMergeGEX)*(1/1000)
# remove genes from gex matrices
dataRaw1$GEX <- dataRaw1$GEX[keepGenes,]
dataRaw2$GEX <- dataRaw2$GEX[keepGenes,]
rm(dataMergeGEX)
create_seurat <- function(x){
# load GEX counts and add celltag counts into seurat object
data <- CreateSeuratObject(counts = x$GEX, project = "SIG04")
data[["oBC"]] <- CreateAssayObject(counts = x$oBC)
return(data)
}
dataSeurat <- vector(mode = "list")
dataSeurat[["lane1"]] <- create_seurat(dataRaw1)
dataSeurat[["lane2"]] <- create_seurat(dataRaw2)
rm(dataRaw1,dataRaw2)
merge_adMeta <- function(seurat,meta){
seurat <- subset(seurat, cells = rownames(meta))
# make sure cell barcodes match order between metadata and seurat
meta <- meta[match(colnames(seurat),rownames(meta)),]
print(paste0("All cells match?: ",
sum(rownames(meta) == colnames(seurat)) == ncol(seurat)))
# replace metadata with anndata meta
seurat@meta.data <- meta
return(seurat)
}
dataSeurat[["lane1"]] <- merge_adMeta(dataSeurat$lane1, metaLane1)
dataSeurat[["lane1"]] <- merge_adMeta(dataSeurat$lane2, metaLane2)
data <- merge(dataSeurat[[1]],dataSeurat[[2]],
add.cell.ids = c("lane1","lane2"), project = "SIG04") %>%
JoinLayers()
data
data
data@meta.data
dataSeurat$lane1@meta.data
library(tidyverse)
library(Seurat)
library(hdf5r)
library(ggplot2)
library(clustree)
library(cowplot)
library(patchwork)
library(ggpointdensity)
knitr::opts_chunk$set(echo = TRUE)
source("functions/plotting_fxns.R")
source("functions/scRNA_seq_analysis_functions.R")
theme_set(theme_Publication())
# import raw counts from cellranger
dataRaw1 <- Read10X_h5("C:/Users/Eric/Documents/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane1_merge_GEX_oBC/filtered_feature_bc_matrix.h5")
dataRaw2 <- Read10X_h5("C:/Users/Eric/Documents/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane2_merge_GEX_oBC/filtered_feature_bc_matrix.h5")
# import post-QC anndata metadata
metaLane1 <- read.csv("processing_outs/postQC_meta_lane1.csv", row.names = "cell_barcode")
metaLane2 <- read.csv("processing_outs/postQC_meta_lane2.csv", row.names = "cell_barcode")
names(dataRaw1)
names(dataRaw2)
subset_joint <- function(x){
# identify joint cells between BC and GEX dataset
jointCells <- intersect(colnames(x$`Gene Expression`),
colnames(x$`CRISPR Guide Capture`))
# subset each dataset to include joint cells
data <- vector(mode = "list")
data[["GEX"]] <- x$`Gene Expression`[,jointCells]
data[["oBC"]] <- x$`CRISPR Guide Capture`[,jointCells]
return(data)
}
dataRaw1 <- subset_joint(dataRaw1)
dataRaw2 <- subset_joint(dataRaw2)
dataMergeGEX <- cbind(dataRaw1$GEX,dataRaw2$GEX)
# create vector of genes to keep
keepGenes <- Matrix::rowSums(dataMergeGEX > 0) >= ncol(dataMergeGEX)*(1/1000)
# remove genes from gex matrices
dataRaw1$GEX <- dataRaw1$GEX[keepGenes,]
dataRaw2$GEX <- dataRaw2$GEX[keepGenes,]
rm(dataMergeGEX)
create_seurat <- function(x){
# load GEX counts and add celltag counts into seurat object
data <- CreateSeuratObject(counts = x$GEX, project = "SIG04")
data[["oBC"]] <- CreateAssayObject(counts = x$oBC)
return(data)
}
dataSeurat <- vector(mode = "list")
dataSeurat[["lane1"]] <- create_seurat(dataRaw1)
dataSeurat[["lane2"]] <- create_seurat(dataRaw2)
rm(dataRaw1,dataRaw2)
merge_adMeta <- function(seurat,meta){
seurat <- subset(seurat, cells = rownames(meta))
# make sure cell barcodes match order between metadata and seurat
meta <- meta[match(colnames(seurat),rownames(meta)),]
print(paste0("All cells match?: ",
sum(rownames(meta) == colnames(seurat)) == ncol(seurat)))
# replace metadata with anndata meta
seurat@meta.data <- meta
return(seurat)
}
dataSeurat[["lane1"]] <- merge_adMeta(dataSeurat$lane1, metaLane1)
dataSeurat[["lane2"]] <- merge_adMeta(dataSeurat$lane2, metaLane2)
data <- merge(dataSeurat[[1]],dataSeurat[[2]],
add.cell.ids = c("lane1","lane2"), project = "SIG04") %>%
JoinLayers()
data@meta.data
DefaultAssay(data) <- "RNA"
data <- NormalizeData(data, normalization.method = "LogNormalize") %>%
FindVariableFeatures(selection.method = "vst",
nfeatures = 2000,
verbose = FALSE) %>%
ScaleData
data <- ScaleData(data)
DefaultAssay(data) <- "oBC"
data <- NormalizeData(data, normalization.method = "CLR") %>%
ScaleData
rm(dataSeurat)
data@meta.data
test <- subset(data, subset = oBC_classification == "singlet" & oBC_feature_call == "p129")
test
VlnPlot(test, "p129")
VlnPlot(test, "p129", group.by = "oBC_feature_call")
test <- subset(data, subset = oBC_classification == "singlet")
VlnPlot(test, "p129", group.by = "oBC_feature_call")
VlnPlot(test, "p129", group.by = "oBC_feature_call") + NoLegend()
VlnPlot(test, "p129", group.by = "oBC_feature_call", pt.size = 0) + NoLegend()
VlnPlot(test, "IL4-pool", group.by = "oBC_feature_call", pt.size = 0) + NoLegend()
VlnPlot(test, "IL6-pool", group.by = "oBC_feature_call", pt.size = 0) + NoLegend()
VlnPlot(test, "IL12", group.by = "oBC_feature_call", pt.size = 0) + NoLegend()
VlnPlot(test, "Wnt1", group.by = "oBC_feature_call", pt.size = 0) + NoLegend()
VlnPlot(test, "WNT1", group.by = "oBC_feature_call", pt.size = 0) + NoLegend()
DefaultAssay(data) <- "RNA"
cellCycleGenes <- read_csv("C:/Users/Eric/Documents/datasets/gene_sets/cell_cycle_genes_seurat_mouse.csv")
# cellCycleGenes <- read_csv("/Users/wange7/Library/CloudStorage/GoogleDrive-ericwang314@gmail.com/My Drive/Lab/datasets/gene_sets/cell_cycle_genes_seurat_mouse.csv")
data <- CellCycleScoring(dataSub, s.features = cellCycleGenes$s_genes,
g2m.features = cellCycleGenes$g2m_genes)
DefaultAssay(data) <- "RNA"
cellCycleGenes <- read_csv("C:/Users/Eric/Documents/datasets/gene_sets/cell_cycle_genes_seurat_mouse.csv")
# cellCycleGenes <- read_csv("/Users/wange7/Library/CloudStorage/GoogleDrive-ericwang314@gmail.com/My Drive/Lab/datasets/gene_sets/cell_cycle_genes_seurat_mouse.csv")
data <- CellCycleScoring(data, s.features = cellCycleGenes$s_genes,
g2m.features = cellCycleGenes$g2m_genes)
data@meta.data
saveRDS(data, "C:/Users/Eric/Documents/datasets/EYW/SIG04_10x_240816/seurat_outs/SIG04_postQC_seurat_all.rds")
