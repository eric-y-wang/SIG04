}
dataSeurat <- lapply(dataSeurat, function(x) add_qc_metrics(x))
metadata <- data@meta.data
metadata
dataSeurat
metadata <- bind_rows(dataSeurat[[1]]@meta.data,dataSeurat[[2]]@meta.data)
library(tidyverse)
library(Seurat)
library(hdf5r)
library(ggplot2)
library(clustree)
library(cowplot)
library(patchwork)
library(ggpointdensity)
knitr::opts_chunk$set(echo = TRUE)
source("functions/plotting_fxns.R")
source("functions/scRNA_seq_analysis_functions.R")
theme_set(theme_Publication())
dataRaw1 <- Read10X_h5("C:/Users/Eric/My Drive/Lab/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane1_GEX_oBC/filtered_feature_bc_matrix.h5")
dataRaw2 <- Read10X_h5("C:/Users/Eric/My Drive/Lab/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane2_GEX_oBC/filtered_feature_bc_matrix.h5")
names(dataRaw1)
names(dataRaw2)
subset_joint <- function(x){
# identify joint cells between BC and GEX dataset
jointCells <- intersect(colnames(x$`Gene Expression`),
colnames(x$`Antibody Capture`))
# subset each dataset to include joint cells
data <- vector(mode = "list")
data[["GEX"]] <- x$`Gene Expression`[,jointCells]
data[["oBC"]] <- x$`Antibody Capture`[,jointCells]
return(data)
}
dataRaw1 <- subset_joint(dataRaw1)
dataRaw2 <- subset_joint(dataRaw2)
dataMergeGEX <- cbind(dataRaw1$GEX,dataRaw2$GEX)
# create vector of genes to keep
keepGenes <- Matrix::rowSums(dataMergeGEX > 0) >= ncol(dataMergeGEX)*0.0002*0.3
# remove genes from gex matrices
dataRaw1$GEX <- dataRaw1$GEX[keepGenes,]
dataRaw2$GEX <- dataRaw2$GEX[keepGenes,]
rm(dataMergeGEX)
create_seurat <- function(x){
# load GEX counts and add celltag counts into seurat object
data <- CreateSeuratObject(counts = x$GEX, project = "SIG04")
data[["oBC"]] <- CreateAssayObject(counts = x$oBC)
return(data)
}
dataSeurat <- vector(mode = "list")
dataSeurat[["lane1"]] <- create_seurat(dataRaw1)
dataSeurat[["lane2"]] <- create_seurat(dataRaw2)
rm(dataRaw1,dataRaw2)
add_qc_metrics <- function(x){
DefaultAssay(x) <- "RNA"
# calculate percent mitochondrial reads and ratio
x[["percent.mt"]] <- PercentageFeatureSet(x, pattern = "^mt-")
x[["percent.ribo"]] <- PercentageFeatureSet(x, pattern = "^Rpl|^Rps")
x[["mitoRatio"]] <- x@meta.data$percent.mt / 100
x[["log10GenesPerUMI"]] <- log10(x$nFeature_RNA)/log10(x$nCount_RNA)
x[["log10nFeature_RNA"]] <- log10(x$nFeature_RNA)
x[["log10nCount_RNA"]] <- log10(x$nCount_RNA)
return(x)
}
dataSeurat <- lapply(dataSeurat, function(x) add_qc_metrics(x))
metadata <- bind_rows(dataSeurat[[1]]@meta.data,dataSeurat[[2]]@meta.data)
metadata
metadata <- bind_rows(dataSeurat[[1]]@meta.data,dataSeurat[[2]]@meta.data) %>%
mutate(orig.ident = c(rep("lane1",ncol(dataSeurat[[1]])),rep("lane1",ncol(dataSeurat[[2]]))))
metadata
# enter QC values
qcValues <- c(nFeature_RNA = 1000, nCount_RNA = 2000, percent.mt = 5)
# quantify how many cells there are
paste0("There are ", ncol(data), " cells")
# Visualize the number UMIs/transcripts per cell
p2 <- metadata %>%
ggplot(aes(color=orig.ident, x=nCount_RNA, fill= orig.ident)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
ylab("Cell density") +
geom_vline(xintercept = qcValues[2]) +
NoLegend()
# Visualize the distribution of genes detected per cell via histogram
p3 <- metadata %>%
ggplot(aes(color=orig.ident, x=nFeature_RNA, fill= orig.ident)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
geom_vline(xintercept = qcValues[1]) +
NoLegend()
# Visualize the correlation between genes detected and number of UMIs and determine whether strong presence of cells with low numbers of genes/UMIs
p4 <- metadata %>%
ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) +
geom_point() +
scale_colour_gradient(low = "gray90", high = "black") +
scale_x_log10() +
scale_y_log10() +
geom_vline(xintercept = qcValues[2]) +
geom_hline(yintercept = qcValues[1])
# Visualize the distribution of mitochondrial gene expression detected per cell
p5 <- metadata %>%
ggplot(aes(color=orig.ident, x=percent.mt, fill=orig.ident)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = qcValues[3]) +
xlim(0,10) +
NoLegend()
# Visualize the overall complexity of the gene expression by visualizing the genes detected per UMI
p6 <- metadata %>%
ggplot(aes(x=log10GenesPerUMI, color = orig.ident, fill=orig.ident)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = 0.8)
# Visualize the correlation between genes detected and number of UMIs with mt filter
p1 <- metadata %>%
filter(percent.mt < qcValues[3]) %>%
ggplot(aes(x=nCount_RNA, y=nFeature_RNA)) +
geom_pointdensity() +
scale_color_viridis_c() +
scale_x_log10() +
scale_y_log10() +
geom_vline(xintercept = qcValues[2]) +
geom_hline(yintercept = qcValues[1])
plot_grid(p2,p3,p5,p6,p4,p1, ncol = 3)
metadata <- bind_rows(dataSeurat[[1]]@meta.data,dataSeurat[[2]]@meta.data) %>%
mutate(orig.ident = c(rep("lane1",ncol(dataSeurat[[1]])),rep("lane2",ncol(dataSeurat[[2]]))))
# enter QC values
qcValues <- c(nFeature_RNA = 1000, nCount_RNA = 2000, percent.mt = 5)
# quantify how many cells there are
paste0("There are ", ncol(data), " cells")
# Visualize the number UMIs/transcripts per cell
p2 <- metadata %>%
ggplot(aes(color=orig.ident, x=nCount_RNA, fill= orig.ident)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
ylab("Cell density") +
geom_vline(xintercept = qcValues[2]) +
NoLegend()
# Visualize the distribution of genes detected per cell via histogram
p3 <- metadata %>%
ggplot(aes(color=orig.ident, x=nFeature_RNA, fill= orig.ident)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
geom_vline(xintercept = qcValues[1]) +
NoLegend()
# Visualize the correlation between genes detected and number of UMIs and determine whether strong presence of cells with low numbers of genes/UMIs
p4 <- metadata %>%
ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) +
geom_point() +
scale_colour_gradient(low = "gray90", high = "black") +
scale_x_log10() +
scale_y_log10() +
geom_vline(xintercept = qcValues[2]) +
geom_hline(yintercept = qcValues[1])
# Visualize the distribution of mitochondrial gene expression detected per cell
p5 <- metadata %>%
ggplot(aes(color=orig.ident, x=percent.mt, fill=orig.ident)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = qcValues[3]) +
xlim(0,10) +
NoLegend()
# Visualize the overall complexity of the gene expression by visualizing the genes detected per UMI
p6 <- metadata %>%
ggplot(aes(x=log10GenesPerUMI, color = orig.ident, fill=orig.ident)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = 0.8)
# Visualize the correlation between genes detected and number of UMIs with mt filter
p1 <- metadata %>%
filter(percent.mt < qcValues[3]) %>%
ggplot(aes(x=nCount_RNA, y=nFeature_RNA)) +
geom_pointdensity() +
scale_color_viridis_c() +
scale_x_log10() +
scale_y_log10() +
geom_vline(xintercept = qcValues[2]) +
geom_hline(yintercept = qcValues[1])
plot_grid(p2,p3,p5,p6,p4,p1, ncol = 3)
dataQC <- lapply(dataSeurat, function(x) subset(x, subset = (nFeature_RNA >= qcValues[1]) & (nCount_RNA >=qcValues[2]) & (percent.mt < qcValues[3])))
?HTODemux()
dataQC <- lapply(dataQC, function(x) NormalizeData(x, assay = "oBC", normalization.method = "CLR"))
dataQC <- lapply(dataQC, function(x) HTODemux(x, assay = "HTO"))
dataQC <- lapply(dataQC, function(x) NormalizeData(x, assay = "oBC", normalization.method = "CLR"))
dataQC <- lapply(dataQC, function(x) HTODemux(x, assay = "oBC"))
dataQC
renv::restore()
renv::status()
?renv::status()
renv::snapshot()
library(tidyverse)
library(Seurat)
library(hdf5r)
library(ggplot2)
library(clustree)
library(cowplot)
library(patchwork)
library(ggpointdensity)
knitr::opts_chunk$set(echo = TRUE)
source("functions/plotting_fxns.R")
source("functions/scRNA_seq_analysis_functions.R")
theme_set(theme_Publication())
dataRaw1 <- Read10X_h5("C:/Users/Eric/My Drive/Lab/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane1_GEX_oBC/filtered_feature_bc_matrix.h5")
dataRaw2 <- Read10X_h5("C:/Users/Eric/My Drive/Lab/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane2_GEX_oBC/filtered_feature_bc_matrix.h5")
names(dataRaw1)
names(dataRaw2)
subset_joint <- function(x){
# identify joint cells between BC and GEX dataset
jointCells <- intersect(colnames(x$`Gene Expression`),
colnames(x$`Antibody Capture`))
# subset each dataset to include joint cells
data <- vector(mode = "list")
data[["GEX"]] <- x$`Gene Expression`[,jointCells]
data[["oBC"]] <- x$`Antibody Capture`[,jointCells]
data[["oBC_pseudo"]] <- x$`Antibody Capture`[,jointCells]+1
return(data)
}
dataRaw1 <- subset_joint(dataRaw1)
dataRaw2 <- subset_joint(dataRaw2)
dataMergeGEX <- cbind(dataRaw1$GEX,dataRaw2$GEX)
# create vector of genes to keep
keepGenes <- Matrix::rowSums(dataMergeGEX > 0) >= ncol(dataMergeGEX)*0.0002*0.3
# remove genes from gex matrices
dataRaw1$GEX <- dataRaw1$GEX[keepGenes,]
dataRaw2$GEX <- dataRaw2$GEX[keepGenes,]
rm(dataMergeGEX)
create_seurat <- function(x){
# load GEX counts and add celltag counts into seurat object
data <- CreateSeuratObject(counts = x$GEX, project = "SIG04")
data[["oBC"]] <- CreateAssayObject(counts = x$oBC)
return(data)
}
dataSeurat <- vector(mode = "list")
dataSeurat[["lane1"]] <- create_seurat(dataRaw1)
dataSeurat[["lane2"]] <- create_seurat(dataRaw2)
rm(dataRaw1,dataRaw2)
add_qc_metrics <- function(x){
DefaultAssay(x) <- "RNA"
# calculate percent mitochondrial reads and ratio
x[["percent.mt"]] <- PercentageFeatureSet(x, pattern = "^mt-")
x[["percent.ribo"]] <- PercentageFeatureSet(x, pattern = "^Rpl|^Rps")
x[["mitoRatio"]] <- x@meta.data$percent.mt / 100
x[["log10GenesPerUMI"]] <- log10(x$nFeature_RNA)/log10(x$nCount_RNA)
x[["log10nFeature_RNA"]] <- log10(x$nFeature_RNA)
x[["log10nCount_RNA"]] <- log10(x$nCount_RNA)
return(x)
}
dataSeurat <- lapply(dataSeurat, function(x) add_qc_metrics(x))
metadata <- bind_rows(dataSeurat[[1]]@meta.data,dataSeurat[[2]]@meta.data) %>%
mutate(orig.ident = c(rep("lane1",ncol(dataSeurat[[1]])),rep("lane2",ncol(dataSeurat[[2]]))))
# enter QC values
qcValues <- c(nFeature_RNA = 1000, nCount_RNA = 2000, percent.mt = 5)
# quantify how many cells there are
paste0("There are ", ncol(data), " cells")
# Visualize the number UMIs/transcripts per cell
p2 <- metadata %>%
ggplot(aes(color=orig.ident, x=nCount_RNA, fill= orig.ident)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
ylab("Cell density") +
geom_vline(xintercept = qcValues[2]) +
NoLegend()
# Visualize the distribution of genes detected per cell via histogram
p3 <- metadata %>%
ggplot(aes(color=orig.ident, x=nFeature_RNA, fill= orig.ident)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
geom_vline(xintercept = qcValues[1]) +
NoLegend()
# Visualize the correlation between genes detected and number of UMIs and determine whether strong presence of cells with low numbers of genes/UMIs
p4 <- metadata %>%
ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) +
geom_point() +
scale_colour_gradient(low = "gray90", high = "black") +
scale_x_log10() +
scale_y_log10() +
geom_vline(xintercept = qcValues[2]) +
geom_hline(yintercept = qcValues[1])
# Visualize the distribution of mitochondrial gene expression detected per cell
p5 <- metadata %>%
ggplot(aes(color=orig.ident, x=percent.mt, fill=orig.ident)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = qcValues[3]) +
xlim(0,10) +
NoLegend()
# Visualize the overall complexity of the gene expression by visualizing the genes detected per UMI
p6 <- metadata %>%
ggplot(aes(x=log10GenesPerUMI, color = orig.ident, fill=orig.ident)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = 0.8)
# Visualize the correlation between genes detected and number of UMIs with mt filter
p1 <- metadata %>%
filter(percent.mt < qcValues[3]) %>%
ggplot(aes(x=nCount_RNA, y=nFeature_RNA)) +
geom_pointdensity() +
scale_color_viridis_c() +
scale_x_log10() +
scale_y_log10() +
geom_vline(xintercept = qcValues[2]) +
geom_hline(yintercept = qcValues[1])
plot_grid(p2,p3,p5,p6,p4,p1, ncol = 3)
dataQC <- lapply(dataSeurat, function(x) subset(x, subset = (nFeature_RNA >= qcValues[1]) & (nCount_RNA >=qcValues[2]) & (percent.mt < qcValues[3])))
dataQC <- lapply(dataQC, function(x) NormalizeData(x, assay = "oBC_pseudo", normalization.method = "CLR"))
dataSeurat
library(tidyverse)
library(Seurat)
library(hdf5r)
library(ggplot2)
library(clustree)
library(cowplot)
library(patchwork)
library(ggpointdensity)
knitr::opts_chunk$set(echo = TRUE)
source("functions/plotting_fxns.R")
source("functions/scRNA_seq_analysis_functions.R")
theme_set(theme_Publication())
dataRaw1 <- Read10X_h5("C:/Users/Eric/My Drive/Lab/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane1_GEX_oBC/filtered_feature_bc_matrix.h5")
dataRaw2 <- Read10X_h5("C:/Users/Eric/My Drive/Lab/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane2_GEX_oBC/filtered_feature_bc_matrix.h5")
names(dataRaw1)
names(dataRaw2)
subset_joint <- function(x){
# identify joint cells between BC and GEX dataset
jointCells <- intersect(colnames(x$`Gene Expression`),
colnames(x$`Antibody Capture`))
# subset each dataset to include joint cells
data <- vector(mode = "list")
data[["GEX"]] <- x$`Gene Expression`[,jointCells]
data[["oBC"]] <- x$`Antibody Capture`[,jointCells]
return(data)
}
dataRaw1 <- subset_joint(dataRaw1)
dataRaw2 <- subset_joint(dataRaw2)
dataMergeGEX <- cbind(dataRaw1$GEX,dataRaw2$GEX)
# create vector of genes to keep
keepGenes <- Matrix::rowSums(dataMergeGEX > 0) >= ncol(dataMergeGEX)*0.0002*0.3
# remove genes from gex matrices
dataRaw1$GEX <- dataRaw1$GEX[keepGenes,]
dataRaw2$GEX <- dataRaw2$GEX[keepGenes,]
rm(dataMergeGEX)
create_seurat <- function(x){
# load GEX counts and add celltag counts into seurat object
data <- CreateSeuratObject(counts = x$GEX, project = "SIG04")
data[["oBC"]] <- CreateAssayObject(counts = x$oBC)
data[["oBC_pseudo"]] <- CreateAssayObject(counts = x$oBC+1)
return(data)
}
dataSeurat <- vector(mode = "list")
dataSeurat[["lane1"]] <- create_seurat(dataRaw1)
dataSeurat[["lane2"]] <- create_seurat(dataRaw2)
rm(dataRaw1,dataRaw2)
add_qc_metrics <- function(x){
DefaultAssay(x) <- "RNA"
# calculate percent mitochondrial reads and ratio
x[["percent.mt"]] <- PercentageFeatureSet(x, pattern = "^mt-")
x[["percent.ribo"]] <- PercentageFeatureSet(x, pattern = "^Rpl|^Rps")
x[["mitoRatio"]] <- x@meta.data$percent.mt / 100
x[["log10GenesPerUMI"]] <- log10(x$nFeature_RNA)/log10(x$nCount_RNA)
x[["log10nFeature_RNA"]] <- log10(x$nFeature_RNA)
x[["log10nCount_RNA"]] <- log10(x$nCount_RNA)
return(x)
}
dataSeurat <- lapply(dataSeurat, function(x) add_qc_metrics(x))
metadata <- bind_rows(dataSeurat[[1]]@meta.data,dataSeurat[[2]]@meta.data) %>%
mutate(orig.ident = c(rep("lane1",ncol(dataSeurat[[1]])),rep("lane2",ncol(dataSeurat[[2]]))))
# enter QC values
qcValues <- c(nFeature_RNA = 1000, nCount_RNA = 2000, percent.mt = 5)
# quantify how many cells there are
paste0("There are ", ncol(data), " cells")
# Visualize the number UMIs/transcripts per cell
p2 <- metadata %>%
ggplot(aes(color=orig.ident, x=nCount_RNA, fill= orig.ident)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
ylab("Cell density") +
geom_vline(xintercept = qcValues[2]) +
NoLegend()
# Visualize the distribution of genes detected per cell via histogram
p3 <- metadata %>%
ggplot(aes(color=orig.ident, x=nFeature_RNA, fill= orig.ident)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
geom_vline(xintercept = qcValues[1]) +
NoLegend()
# Visualize the correlation between genes detected and number of UMIs and determine whether strong presence of cells with low numbers of genes/UMIs
p4 <- metadata %>%
ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) +
geom_point() +
scale_colour_gradient(low = "gray90", high = "black") +
scale_x_log10() +
scale_y_log10() +
geom_vline(xintercept = qcValues[2]) +
geom_hline(yintercept = qcValues[1])
# Visualize the distribution of mitochondrial gene expression detected per cell
p5 <- metadata %>%
ggplot(aes(color=orig.ident, x=percent.mt, fill=orig.ident)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = qcValues[3]) +
xlim(0,10) +
NoLegend()
# Visualize the overall complexity of the gene expression by visualizing the genes detected per UMI
p6 <- metadata %>%
ggplot(aes(x=log10GenesPerUMI, color = orig.ident, fill=orig.ident)) +
geom_density(alpha = 0.2) +
geom_vline(xintercept = 0.8)
# Visualize the correlation between genes detected and number of UMIs with mt filter
p1 <- metadata %>%
filter(percent.mt < qcValues[3]) %>%
ggplot(aes(x=nCount_RNA, y=nFeature_RNA)) +
geom_pointdensity() +
scale_color_viridis_c() +
scale_x_log10() +
scale_y_log10() +
geom_vline(xintercept = qcValues[2]) +
geom_hline(yintercept = qcValues[1])
plot_grid(p2,p3,p5,p6,p4,p1, ncol = 3)
dataQC <- lapply(dataSeurat, function(x) subset(x, subset = (nFeature_RNA >= qcValues[1]) & (nCount_RNA >=qcValues[2]) & (percent.mt < qcValues[3])))
dataQC <- lapply(dataQC, function(x) NormalizeData(x, assay = "oBC_pseudo", normalization.method = "CLR"))
dataQC <- lapply(dataQC, function(x) HTODemux(x, assay = "oBC_pseudo"))
library(tidyverse)
library(Seurat)
library(hdf5r)
library(ggplot2)
library(clustree)
library(cowplot)
library(patchwork)
library(ggpointdensity)
knitr::opts_chunk$set(echo = TRUE)
source("functions/plotting_fxns.R")
source("functions/scRNA_seq_analysis_functions.R")
theme_set(theme_Publication())
dataRaw1 <- Read10X_h5("C:/Users/Eric/My Drive/Lab/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane1_GEX_oBC/filtered_feature_bc_matrix.h5")
dataRaw2 <- Read10X_h5("C:/Users/Eric/My Drive/Lab/datasets/EYW/SIG04_10x_240816/cellranger_outs/SIG04_lane2_GEX_oBC/filtered_feature_bc_matrix.h5")
names(dataRaw1)
names(dataRaw2)
subset_joint <- function(x){
# identify joint cells between BC and GEX dataset
jointCells <- intersect(colnames(x$`Gene Expression`),
colnames(x$`Antibody Capture`))
# subset each dataset to include joint cells
data <- vector(mode = "list")
data[["GEX"]] <- x$`Gene Expression`[,jointCells]
data[["oBC"]] <- x$`Antibody Capture`[,jointCells]
return(data)
}
dataRaw1 <- subset_joint(dataRaw1)
dataRaw2 <- subset_joint(dataRaw2)
dataMergeGEX <- cbind(dataRaw1$GEX,dataRaw2$GEX)
# create vector of genes to keep
keepGenes <- Matrix::rowSums(dataMergeGEX > 0) >= ncol(dataMergeGEX)*0.0002*0.3
# remove genes from gex matrices
dataRaw1$GEX <- dataRaw1$GEX[keepGenes,]
dataRaw2$GEX <- dataRaw2$GEX[keepGenes,]
rm(dataMergeGEX)
rowSums(dataRaw1$oBC)
rowSums(dataRaw1$oBC)
rowSums(dataRaw2$oBC)
rowSums(dataRaw2$oBC > 0)
rowSums(dataRaw1$oBC > 0)
rowSums(dataRaw2$oBC > 0)
rowSums(dataQC[[1]]@assays$oBC@counts)
rowSums(dataQC[[1]]@assays$oBC@counts > 0)
rowSums(dataQC[[2]]@assays$oBC@counts > 0)
dataQC[[2]]@assays$oBC_pseudo@data
rowSums(dataQC[[2]]@assays$oBC@data > 0)
rowSums(dataQC[[2]]@assays$oBC@scale.data > 0)
rowSums(dataQC[[2]]@assays$oBC@scale.data)
rowSums(dataQC[[2]]@assays$oBC@data)
rowSums(dataQC[[2]]@assays$oBC@counts)
rowSums(dataQC[[2]]@assays$oBC_pseudo@counts)
rowSums(dataQC[[2]]@assays$oBC_pseudo@data)
rowSums(dataQC[[2]]@assays$oBC_pseudo@scale.data)
test <- dataQC[[2]]
test <- NormalizeData(test, assay = "oBC", normalization.method = "CLR")
test <- HTODemux(test, assay = "oBC")
test <- HTODemux(test, assay = "oBC", nsamples = 50000)
colSums(dataRaw1$oBC > 0)
colSums(dataRaw1$oBC > 0) > 0
sum(colSums(dataRaw1$oBC > 0) > 0)/ncol(dataRaw1)
sum(colSums(dataRaw1$oBC > 0) > 0)
sum(colSums(dataRaw1$oBC > 0) > 0)/ncol(dataRaw1$oBC)
sum(colSums(dataRaw2$oBC > 0) > 0)/ncol(dataRaw2$oBC)
sum(colSums(dataRaw1$oBC > 0) > 0)/ncol(dataRaw1$oBC)
sum(colSums(dataRaw2$oBC > 0) > 0)/ncol(dataRaw2$oBC)
dataQC <- lapply(dataQC, function(x) NormalizeData(x, assay = "oBC", normalization.method = "CLR"))
dataQC <- lapply(dataQC, function(x) HTODemux(x, assay = "oBC", nsamples = 10000))
dataQC <- lapply(dataQC, function(x) NormalizeData(x, assay = "oBC", normalization.method = "CLR"))
dataQC <- lapply(dataQC, function(x) HTODemux(x, assay = "oBC", nsamples = 1000))
metadata %>%
ggplot(aes(color=orig.ident, x=nCount_oBC, fill= orig.ident)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
ylab("Cell density") +
geom_vline(xintercept = qcValues[2]) +
NoLegend()
metadata %>%
ggplot(aes(color=orig.ident, x=nCount_oBC, fill= orig.ident)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
ylab("Cell density")
metadata %>%
ggplot(aes(color=orig.ident, x=nCount_oBC, fill= orig.ident)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
ylab("Cell density")
ncol(subset(dataQC[[2]], subset = nCount_oBC > 0))/ncol(dataQC[[2]])
paste0(ncol(subset(dataQC[[2]], subset = nCount_oBC > 0))/ncol(dataQC[[2]])," of cells have oBC > 0")
dataQC[[2]] <- subset(dataQC[[2]], subset = nCount_oBC > 0)
dataQC <- lapply(dataQC, function(x) NormalizeData(x, assay = "oBC", normalization.method = "CLR"))
dataQC <- lapply(dataQC, function(x) HTODemux(x, assay = "oBC"))
dataQC$lane2$nCount_oBC
dataQC$lane2$nCount_oBC > 0 %>% sum()
sum(dataQC$lane2$nCount_oBC > 0)
dataQC <- lapply(dataQC, function(x) HTODemux(x, assay = "oBC_pseudo"))
dataQC[[2]]@assays$oBC@counts
dataQC[[2]]@assays$oBC@counts %>% rowSums()
dataQC[[2]]@assays$oBC@counts %>% rowSums() %>% hist()
dataQC[[2]]@assays$oBC@counts %>% rowSums() %>% log10() %>% hist()
test <- dataQC[[2]]
test <- HTODemux(test, assay = "oBC", nsamples = 1000)
